<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--   包扫描 -->
    <context:component-scan base-package="com.blog">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
<!--配置数据源-->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.user}"></property>
        <property name="driverClassName" value="${jdbc.driverClass}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
<!--  配置mybatis  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis-conf.xml"></property>
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"></property>
    </bean>

<!--  把所有mapper的实现类加入到IOC容器  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--   mapper接口所在的包     -->
        <property name="basePackage" value="com.blog.dao"></property>
    </bean>


<!--  事务管理  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--&lt;!&ndash;  安全管理器  &ndash;&gt;-->
<!--    <bean id="myrealm" class="com.blog.realm.Myrealm"></bean>-->

<!--    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
<!--        <property name="realm" ref="myrealm"></property>-->

<!--    </bean>-->

<!--    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
<!--        &lt;!&ndash;   Shiro的核心安全接口,必须有       &ndash;&gt;-->
<!--        <property name="securityManager" ref="securityManager"></property>-->
<!--        &lt;!&ndash;    身份认证失败,跳转到登入页面的配置    &ndash;&gt;-->
<!--        <property name="loginUrl" value="/login.jsp"></property>-->
<!--        -->
<!--        <property name="filterChainDefinitions">-->
<!--            <value>-->
<!--                /login=anon-->
<!--                /admin/**=authc-->
<!--            </value>-->
<!--        </property>-->
<!--    </bean>-->
<!--&lt;!&ndash;  保证shiro内部lifecycle函数的执行  &ndash;&gt;-->
<!--    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>-->

<!--&lt;!&ndash;  开启shiro的注解  &ndash;&gt;-->
<!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"></bean>-->

<!--    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
<!--        <property name="securityManager" ref="securityManager"></property>-->
<!--    </bean>-->

</beans>